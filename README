REFATORANDO UM SISTEMA BASEADO NA ARQUITETURA EM CAMADAS EM UM BASEADO NA ARQUITETURA HEXAGONAL

mvn archetype:generate -D groupId=dev.hugodesouzacaramez -D artifactId=layered -D archetypeArtifactId=maven-archetype-quickstart -D interactiveMode=false

COMPARANDO ARQUITETURA HEXAGONAL COM ARQUITETURA EM CAMADAS

Arquitetura hexagonal é apenas uma das várias abordagens de arquitetura de software. Entre essas
abordagens, uma que se destaca é a chamada arquitetura em camadas, que tem sido amplamente
usada no desenvolvimento de software empresarial por anos. Sua vasta adoção se deve ao fato de ser
razoavelmente simples aplicar os princípios da arquitetura em camadas e também porque esse é um
dos padrões que podem surgir naturalmente quando não há uma decisão consciente sobre qual abordagem arquitetônica usar para um novo projeto.

Entendendo a arquitetura em camadas e estando ciente de suas diferenças ao compará-la com a hexagonal
arquitetura é boa para nos ajudar a tomar decisões mais informadas sobre qual abordagem de arquitetura
de software usar ao iniciar ou refatorar um projeto de software. É por isso que neste capítulo,
começaremos revisando ideias de arquitetura em camadas. Então, com base nessas ideias,
implementaremos um aplicativo simples para aprender como aplicar os conceitos de arquitetura em
camadas. Em seguida, prosseguiremos refatorando esse aplicativo simples usando ideias de arquitetura
hexagonal para que possamos entender melhor os contrastes entre as duas arquiteturas. Finalmente,
terminaremos avaliando as vantagens e desvantagens das arquiteturas hexagonal e em camadas.

Os seguintes tópicos serão abordados neste capítulo:

• Revisando a arquitetura em camadas
• Criação de uma aplicação utilizando a arquitetura em camadas
• Reescrever uma aplicação de arquitetura em camadas em uma hexagonal
• Avaliar os benefícios e desvantagens das arquiteturas hexagonais e em camadas

Ao final deste capítulo, você entenderá a diferença entre arquitetura em camadas e hexagonal, o que lhe
permitirá tomar decisões melhores e mais informadas sobre seu próximo projeto de software.

============================
Revisando a arquitetura em camadas

Arquitetura em camadas, na minha opinião, pode surgir quando um grupo de desenvolvedores responsáveis
por um projeto não para para pensar sobre qual tipo de arquitetura é mais adequado para o software que eles querem desenvolver.
Observei esse cenário em projetos onde, sem planejamento consciente da equipe, a estrutura do
código evoluiria para algum nível de separação de preocupações, onde o código de apresentação/API
ficaria um tanto isolado do código de negócios e infraestrutura. Você não veria a lógica de negócios
principal nas classes responsáveis por fornecer um ponto de extremidade REST, por exemplo. Você
pode notar, em tais projetos, pacotes chamados modelo, repositório, serviço e controlador como dicas
para um sistema com base nas ideias de arquitetura em camadas. Eles são dicas porque cada um
desses pacotes geralmente representa uma intenção de alocar uma responsabilidade de software
específica. O código presente no pacote modelo é usado para representar entidades de banco de dados.
O pacote repositório contém classes que mostram que tipo de operações de banco de dados o sistema
pode fazer com base nas entidades modelo. serviço é um pacote onde alguma lógica de negócios é
executada sobre os dados recuperados do banco de dados usando classes do pacote repositório .
Finalmente, o pacote controlador contém classes que expõem endpoints de API para permitir o acionamento de um
dos comportamentos suportados pela aplicação.

Como uma forma de arquitetura em camadas, podemos ver a estrutura do código com base nos
pacotes modelo, repositório, serviço e controlador . Cada pacote representa uma camada com sua
responsabilidade que depende diretamente do código do pacote/camada que vem a seguir ou está
abaixo dele. O controlador depende do serviço, que depende do repositório, que depende do modelo.
Não é incomum ver pequenas variações desse padrão onde mais camadas são introduzidas, embora
a ideia geral de dependência descendente está sempre lá. Pode até haver situações em que uma
camada ignora a próxima camada e depende das classes de outra camada. Podemos ver como um
aplicativo backend baseado em arquitetura em camadas é geralmente estruturado na figura a seguir:

Em vez de uma camada de apresentação, o que faria sentido se estivéssemos desenvolvendo um aplicativo
da web, temos a camada de API contendo classes com lógica de endpoint REST. Essas classes são
responsáveis por receber a solicitação do cliente e disparar algum comportamento do aplicativo na camada
de serviço. Essa camada geralmente contém lógica de negócios que depende de dados externos. Para
lidar com dados externos, temos a camada de dados contendo classes responsáveis por obter, persistir e
mapear dados externos. Não uso o termo persistência aqui para evitar implicar que a fonte de dados será
um banco de dados. Os dados podem vir de qualquer lugar, incluindo um banco de dados.

Eu vi esse padrão sendo empregado em alguns projetos de desenvolvimento de software em grandes
empresas e start-ups. Curiosamente, se você perguntar aos desenvolvedores envolvidos no projeto qual
arquitetura eles usaram, eles provavelmente diriam que nenhuma arquitetura específica foi aplicada,
mesmo que seu código sugira que o software foi desenvolvido com base na arquitetura em camadas.

Como a arquitetura em camadas existe há muitos anos, ela se tornou uma arquitetura padrão
para projetos de software corporativo. A ideia de segregar responsabilidades com base em componentes de sistemas de alto nível
 parecem acomodar uma boa parte das necessidades que vemos em software empresarial,
geralmente porque esse tipo de software segue, na maioria das vezes, o mesmo padrão de receber entrada,
obter dados de algum lugar, executar processamento de dados e, em seguida, persistir ou enviar esses
dados para outro sistema. Dado que muitos aplicativos empresariais são desenvolvidos seguindo esse
padrão, o que muda significativamente entre esses aplicativos é a parte de processamento de dados que
contém as regras de negócios específicas para um determinado aplicativo. As outras partes também podem mudar, mas não tão consideravelmente
APIs são expostas e como os dados são recuperados/persistidos podem ser padronizados em diferentes aplicativos da mesma
organização, especialmente quando a mesma equipe mantém esses aplicativos.

Embora a arquitetura em camadas ajude a fornecer algum nível de desacoplamento, ela não evita
inteiramente situações em que mudanças em uma camada também podem exigir mudanças em outra. Quando você tem a camada de negócio/serviço
dependendo da camada de persistência, mudanças na última podem impactar a primeira. A seguir,
compartilharei uma experiência usando a arquitetura em camadas.

Lembro-me de uma situação em que a equipe com a qual eu estava trabalhando decidiu mudar a tecnologia do banco
de dados no meio do projeto. Durante a implementação, descobriu-se que um recurso ORM disponível para a
tecnologia de banco de dados anterior não estava disponível para o novo banco de dados. O problema era que o
sistema tinha algumas regras de negócios que dependiam diretamente desse recurso ausente do novo banco de dados.
Por fim, tivemos que ajustar nossa abordagem mudando significativamente como essas regras de negócios
seriam processadas. Este aplicativo, em particular, evoluiu sem uma discussão em equipe sobre quais
princípios arquitetônicos deveriam ter sido seguidos. Eventualmente, o projeto evoluiu para algo com
características de arquitetura em camadas.

Para entender melhor a arquitetura em camadas, vamos desenvolver um aplicativo baseado nessa ideia de arquitetura.

=======================================================
Criando um aplicativo usando a arquitetura em camadas

Na seção anterior, vimos como um aplicativo backend baseado em arquitetura em camadas
pode ser estruturado. Nosso exemplo tem três camadas: API, serviço e dados. Seguindo essa estrutura, iremos
desenvolver um aplicativo de usuário simples que permita o registro e login do usuário. Implementaremos a camada
de dados, depois prosseguiremos para a camada de serviço e, então, para a camada de API. O aplicativo será baseado
no Quarkus, então podemos confiar no framework para fornecer endpoints REST e conectar a um banco de dados.

================================
Implementando a camada de dados

A camada de dados é responsável por permitir obter, persistir e mapear dados externos. Contamos com um banco de
dados para o aplicativo do usuário armazenar informações do usuário:

1. Então, vamos começar preparando o Quarkus para que possamos usar um banco de dados H2 na memória:

quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLO
SE_DELAY=-1.;NON_KEYWORDS=user
quarkus.hibernate-orm.database.generation=drop-and-create

A propriedade quarkus.datasource.db-kind diz ao Quarkus para usar o driver H2.
quarkus.datasource.jdbc.url configura um banco de dados na memória que ficará ativo
enquanto o aplicativo estiver em execução. Por fim, definimos quarkus.hibernateorm.database. generation para permitir a criação automática do banco de dados na inicialização do aplicativo.

2. No pacote dev.hugodesouzacaramez.layered.data.entity , criamos o ORM da classe de entidade usuário:

package dev.hugodesouzacaramez.layered.data.entity;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.*;
@Entity
@Getter
@Setter
@RequiredArgsConstructor
@NoArgsConstructor
public class User {
 @Id
 @GeneratedValue(strategy =
 GenerationType.IDENTITY)
 private Long id;
 @NonNull
 private String email;
 @NonNull
 private String password;
}

Usuário é uma entidade ORM porque a anotação @Entity do Jakarta é colocada no topo da classe.
O atributo id é anotado com @GeneratedValue, então o banco de dados subjacente
gera o valor id . Concluímos a implementação com os atributos de e-mail e senha
necessários para o registro e login de novos usuários.

3. No pacote dev.hugodesouzacaramez.layered.data.repository , criamos a classe UserRepository:

package dev.hugodesouzacaramez.layered.data.repository;
import dev.hugodesouzacaramez.layered.data.entity.User;
import io.quarkus.hibernate.orm.
 panache.PanacheRepository;
import jakarta.enterprise.context.ApplicationScoped;
import java.util.Optional;
@ApplicationScoped
public class UserRepository implements PanacheReposi
 tory<User> {
 public Optional<User> findByEmail(String email) {
 return find("email",
 email).firstResultOptional();
 }
}

Ao implementar o PanacheRepository, obtemos operações de banco de dados padrão
predefinidas para permitir buscar, salvar e excluir dados. Além dessas operações
predefinidas, criamos findByEmail para pesquisar entidades User usando o endereço de email. Se nenhum dado for encontrado, ele retorna um Optional vazio.

A entidade User e o repositório compreendem a camada de dados, permitindo-nos persistir e recuperar dados do
usuário de um banco de dados. Vamos agora implementar a camada de serviço.

============================
Implementando a camada de serviço

Precisamos de um lugar para colocar a lógica para verificar se o endereço de e-mail já existe ao registrar
um novo usuário ou validar as credenciais do usuário durante o login. A camada de serviço é onde colocamos essa lógica:

1. No pacote dev.hugodesouzacaramez.layered.service , iniciamos a implementação da classe UserService:

@ApplicationScoped
public class UserService {
 @Inject
 UserRepository userRepository;
 /** Code omitted **/
}

njetamos UserRepository para permitir que a classe de serviço manipule dados externos por meio da
camada de dados.

2. Não mapearemos solicitações de clientes diretamente para uma entidade ORM ao recebê-las. Em vez disso, mapeamos
essas solicitações para uma classe UserDto:

public record UserDto (String email, String password)
 {}

 A classe de registro gerará automaticamente o construtor de classe, getters e setters
 para os campos de e-mail e senha.

 3. Continuando com a classe UserService , implementamos os métodos createAccount
 e isEmailAlreadyUsed:

 @Transactional
 public String createAccount(UserDto userDto) throws
  Exception {
  isEmailAlreadyUsed(userDto.email());
  var user = new User(userDto.email(),
  userDto.password());
  userRepository.persist(user);
  return "User successfully created";
 }
 private void isEmailAlreadyUsed(String email) throws
  Exception {
  if(userRepository.findByEmail(email).isPresent()){
  throw new Exception("Email address already
  exist");
  }
 }

O método createAccount recebe o parâmetro UserDto . Obtemos o e-mail desse
parâmetro e o passamos para o método isEmailAlreadyUsed , que usa
findByEmail do UserRepository para verificar se o e-mail já existe.

4. Para finalizar a implementação do UserService , criamos o login e
Métodos isThePasswordValid:

public String login(UserDto userDto) {
 var optionalUser =
 userRepository.findByEmail(userDto.email());
 if (optionalUser.isPresent()) {
 var user = optionalUser.get();
  var isThePasswordValid =
  isThePasswordValid(user, userDto);
  if (isThePasswordValid) {
  return "Authenticated with success";
  } else {
  return "Invalid credentials";
  }
  } else {
  return "Invalid credentials";
  }
 }
 private boolean isThePasswordValid(User user, UserDto
  userDto) {
  return
  user.getPassword().equals(userDto.password());
 }

 No método de login , obtemos o e-mail do UserDto e o usamos para verificar se a conta de usuário
 existe para esse e-mail. Caso contrário, retornamos a mensagem de credenciais inválidas. Caso
 contrário, verificamos se a senha do UserDto corresponde à senha da entidade User recuperada do
 banco de dados usando UserRepository.

Criar uma conta de usuário e validar as credenciais do usuário para login são responsabilidades da camada
de serviço. Ela faz isso confiando na camada de dados para obter dados do usuário do banco de dados.
Agora precisamos expor uma API para permitir que os clientes enviem solicitações para nosso aplicativo.

==========================================
Implementando a camada API

A última camada, a camada API, é onde implementamos endpoints REST para criação de usuários e
solicitações de login de usuários:

1. No pacote dev.hugodesouzacaramez.layered.api , iniciamos a implementação do
Classe UserEndpoint:

@Path("/user")
public class UserEndpoint {
 @Inject
 UserService userService;
 /** Code omitted **/
}

Injetamos UserService para acessar os métodos createAccount e login da
camada de serviço.

2. Primeiro definimos o endpoint do registro:

@POST
@Produces(MediaType.TEXT_PLAIN)
@Consumes(MediaType.APPLICATION_JSON)
@Path("/register")
public String register(UserDto userDto) throws Excep
 tion {
 return userService.createAccount(userDto);
}

Essa é uma implementação de endpoint REST direta, recebendo um payload JSON
mapeado para UserDto e retornando texto simples. UserDto é passado diretamente
para o método createAccount da classe UserService na camada de serviço.

3. Por fim, definimos o endpoint de login:

@POST
@Produces(MediaType.TEXT_PLAIN)
@Consumes(MediaType.APPLICATION_JSON)
@Path("/login")
public String login(UserDto userDto) {
 return userService.login(userDto);
}

Assim como fizemos no endpoint de registro anterior, aqui estamos simplesmente expondo o endpoint REST
e passando o DTO diretamente para a camada de serviço.

A camada API é responsável apenas por expor os endpoints REST e nada mais. Evitamos colocar qualquer
lógica de negócios nessa camada para garantir que separamos as preocupações entre essa e as outras
camadas.

Vamos ver agora como podemos testar esta aplicação em camadas.

================================
Testando o aplicativo em camadas

Testaremos a camada de serviço focando apenas na lógica que verifica se o e-mail já existe e se as credenciais são
válidas. A seguir está como seria um dos testes:

@QuarkusTest
public class UserServiceTest {
 @Inject
 UserService userService;
 @Test
 public void givenTheUserEmailAlreadyExistsAnExceptionIsThrown()
  throws Exception {
  var userDto = new UserDto("test@hugodesouzacaramez.dev",
  "password");
  userService.createAccount(userDto);
  Assertions.assertThrows(
  Exception.class,
  ()-> userService.createAccount(userDto)
  );
  }
  /** Code omitted **/
 }

O teste anterior verifica se uma exceção é lançada quando o endereço de e-mail já existe. Observe que, para
que esse teste funcione, a camada de serviço depende da camada de dados, que requer um banco de dados
para persistir os dados. Portanto, a lógica do sistema central, presente na camada de serviço, depende
diretamente da camada de dados que é composta pela entidade ORM e classes de repositório. Como lidamos
com dados externos determina o que podemos fazer na camada de serviço.

Suponha que queremos evitar criar essa dependência, onde a lógica do sistema central depende e fica
muito próxima do código de manipulação de dados. Nesse caso, a arquitetura hexagonal pode nos ajudar com um diferente
arranjo onde a lógica do sistema central não depende de nada e fornece a flexibilidade para evoluir essa
lógica central sem nenhuma preocupação sobre como os dados externos são manipulados. Vamos ver como
isso pode ser feito refatorando nossa aplicação de arquitetura em camadas em uma hexagonal.

